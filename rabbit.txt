rabbitmqctl stop
rabbitmqctl list_queues -p rabbit //list queues from rabbit vhost
rabbitmqctl set_vm_memory_high_watermark <fraction> (0.6) //Change amount of memory for rabbit
rabbitmqctl list_connections 

./manage.py celeryctl inspect active_queues
./manage.py celery amqp queue.purge slow

# remove unwanted queues, requires the management plugin to be installed
rabbitmqctl list_queues -p vhost_name |\  # list queues
grep -v "fast\|medium\|slow" |\  # filter queue names that we don't want to delete
tr "[:blank:]" " " |\  # normalize the delimiter in the list_queues print
cut -d " " -f 1 |\  # pick the name of the queue (first column) removing the queue tasks number
xargs -I {} curl -i -u guest:guest -H "content-type:application/json" -XDELETE
http://localhost:15672/api/queues/<vhost_name>/{}  # delete

# http://stackoverflow.com/questions/6742938/deleting-queues-in-rabbitmq/40109514
rabbitmqctl list_queues -p vhost_name | grep -v "fast\|medium\|slow|celery" | tr "[:blank:]" " " | cut -d " " -f 1 | xargs -I {} curl -i -u guest:guest -H "content-type:application/json" -XDELETE
http://localhost:15672/api/queues/<vhost_name>/{}

# check queues on rabbitmqctl
sudo rabbitmqctl list_queues -p rabbit name messages_ready messages_unacknowledged

# close rabbitmq connections from a specific source
sudo rabbitmqctl list_connections -p rabbit pid | grep -v "\.\.\." | xargs -I{} sudo rabbitmqctl close_connection "{}" "Closing orphan connection"

# or by peer_host ip (worker host)
sudo rabbitmqctl list_connections -p rabbit peer_host pid | grep <worker_host_ip> | tr "[:blank:]" " " | cut -d " " -f 2 | xargs -I{} sudo rabbitmqctl close_connection "{}" "Closing orphan connection"

# add rabbitmq admin
curl -S http://localhost:15672/cli/rabbitmqadmin > /usr/local/bin/rabbitmqadmin

# declare queues and exchanges
sudo rabbitmqadmin declare exchange -V rabbit name=<exchange-name> type=x-consistent-hash -u <user> -p <pwd>
for i in $(seq 4); do sudo rabbitmqadmin declare queue -V rabbit name=<queue-name>.$i  -u <user> -p <pwd>; done
for i in $(seq 4); do sudo rabbitmqadmin declare binding -V rabbit source=<exchange-name> destination=<queue-name>.$i routing_key="1" -u <user> -p <pwd>; done

# we can handle master queue location by `x-queue-master-locator` when declaring the queue or by using the `queue_master_locator` on a policy or configuration file.

To move a queue to another cluster node, we can add a policy:
pattern should match the node name i.e.: ^my.queue.name$
Apply to: queues
priority: 100
ha-mode: nodes
ha-params: Add the node name, type should be list. i.e.: rabbit@my.node.name

# list consumers and grep then close connection
sudo rabbitmqctl list_consumers | grep <app-name>
sudo rabbitmqctl close_connection "<connection-pid>" "Closing orphan connection"
